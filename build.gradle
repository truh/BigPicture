apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'idea'
apply plugin: 'eclipse'

logging.captureStandardOutput LogLevel.INFO

sourceCompatibility = 1.7
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    // compile
    compile 'log4j:log4j:1.2.17'
    compile 'javax.servlet:servlet-api:2.5'
    compile 'javax.validation:validation-api:1.1.0.Final'
    compile 'net.sourceforge.argo:argo:3.10'
    compile 'org.hibernate:hibernate-core:4.3.5.Final'
    compile 'org.hibernate:hibernate-entitymanager:4.3.5.Final'
    compile 'org.hibernate:hibernate-validator:5.1.1.Final'
    compile 'org.hsqldb:hsqldb:2.3.2'
    compile 'org.mindrot:jbcrypt:0.3m'
    compile 'org.slf4j:slf4j-parent:1.7.7'

    // test
    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-all:1.9.5'
}

void rst2pdf(String fileOut, String fileIn) {
    println "rst2pdf ${fileIn} -o ${fileOut}"  
    
    if(file(fileOut).lastModified() > file(fileIn).lastModified()) {
        println "[UP-TO-DATE]"
    } else {
        exec {
            commandLine "rst2pdf"
            args fileIn, '-o', fileOut 
        }  
    }
}

void concatPdfs(String fileOut, List<String> inFiles) {
    def upToDate = true

    println '[' + fileOut + '] ->'

    for(String filename: inFiles) {
        println '\t' + filename
        if(file(filename).lastModified() > file(fileOut).lastModified()) {
            upToDate = false
        }
    }

    if(upToDate) {
        println "[UP-TO-DATE]"
    } else {
        def arguments = ["-sPAPERSIZE=a4", "-dNOPAUSE", "-dBATCH", "-sDEVICE=pdfwrite", 
            "-sOutputFile=" + fileOut]   
        arguments.addAll(inFiles) 
    
        exec {
            commandLine "gs"
            args arguments
        }
    }
}

task pdfChangeRequests << {
    def inPath = "doc/"
    def outPath = "build/docs/pdf/pdfChangeRequests/"

    mkdir(outPath)

    def files = file(inPath).listFiles()
    files.each { File file ->
        if (file.name.toLowerCase().endsWith(".rst")) {
            def filename = file.name.split(".rst")[0]
            rst2pdf(outPath + filename + ".pdf", inPath + file.name)
        }
    }
}

task pdfReadme << {
    def inPath = ""
    def outPath = "build/docs/pdf/"

    mkdir(outPath)

    rst2pdf(outPath + "README.pdf", inPath + "README.rst")
}

task pdf(dependsOn: [pdfChangeRequests, pdfReadme]) << {
    def pdfChangeRequests = "build/docs/pdf/pdfChangeRequests/"
    def outPath = "build/docs/pdf/"
    def filename = "BigPicture_kehd_.pdf"

    mkdir(outPath)

    def files = file(pdfChangeRequests).listFiles()
    def pdfs = [outPath + "README.pdf"]
    pdfs.addAll(files)

    concatPdfs(outPath + filename, pdfs)
}
